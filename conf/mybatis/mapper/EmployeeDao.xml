<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace：名称空间；写接口的全类名，告诉MyBatis这个配置文件是实现哪一个接口的-->
<mapper namespace="com.yejh.dao.EmployeeDao">
    <!--使用二级缓存-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

    <!--select：用来定义一个查询操作；
    id：方法名，相当于这个配置是对于某个方法的实现
    resulType：指定方法运行后的返回值类型
    #{属性名}：代表取出传递过来的参数值-->

    <!--自定义结果集，定义每一列数据和javaBean的映射规则
    type=""：指定为哪个javaBean的自定义封装规则，写全类名
    id=""：唯一标识，让别名在后面引用-->
    <resultMap type="com.yejh.bean.Employee" id="emp">
        <!--指定主键列的对应规则-->
        <id property="id" column="id"/>
        <!--普通列-->
        <result property="empName" column="empName"/>
        <result property="email" column="email"/>
        <result property="gender" column="gender"/>

    </resultMap>

    <!--即使查询的返回类型是集合，resultType也写成元素的类型；或者resultMap写成元素的别名-->
    <select id="getAllEmployees" resultMap="emp">
        select *
        from employee
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        select *
        from employee
        where id = #{id}
    </select>

    <!--查询多个记录时，resultType写元素的类型-->
    <select id="getAllEmpsReturnMap" resultType="com.yejh.bean.Employee">
        select *
        from employee
    </select>

    <!--useCache表示是否使用二级缓存，默认为true-->
    <select id="getEmpById" resultType="com.yejh.bean.Employee" useCache="true">
        select *
        from employee
        where id = #{id}
    </select>

    <!--传入参数
        1、单个参数
            基本类型：取值：#{随便写}
            传入pojo：
        2、多个参数
            #{参数名}无效
            可用：0,1（参数的索引）或者param1，param2
            原因：只要传入了多个参数，mabatis会自动将这些参数封装在一个map中
                封装时使用的ekey就是参数的索引
                Map<String, Object> map = new HashMap<>();
                map.put("1", 参数值);
                ...
                #{key}就是从这个map中取值

            解决办法：命名参数（推荐）
                使用@Param注解，为参数指定key

        3、传入pojo
            取值：#{pojo的属性值}

        4、传入map
            取值：#{key}

            拓展：多个参数，自动封装map
            method01(@Param("id")Integer id, String empName, Employee employee)
            Integer id -> #{id}
            String empName -> #{param2}
            employee.email -> #{param3.email}


        5、、#{属性值}可以设置一些规则
                id=#{id, jdbcType=INTEGER}
                一般只有jdbcType才可能是需要被指定的
                万一传入的数据时null：mysql插入null没问题；oracle不知道null是什么类型，就会报错

        6、实际上在mybatis中，有两种取值方式
            #{属性名}：采用参数预编译的方式，参数的位置都是用？代替，参数后来都是预编译设置进去的
                安全，不会有sql注入问题
            ${属性名}：不是参数预编译，而是直接和sql语句进行拼串，不安全
                sql语句只有参数位置时支持预编译的，当需要动态传入表名时
                需要使用${tableName}动态传入表名

            一般都是使用#{}（安全）；在不支持参数预编译的位置进行取值就是用${}
    -->

    <update id="updateEmployee">
        update employee
        <set>
            <if test="empName!=null and !empName.equals('')">
                empName=#{empName}
            </if>
            <if test="email!=null and !email.equals('')">
                ,email=#{email}
            </if>
            <if test="gender!=null">
                ,gender=#{gender}
            </if>
            where id=#{id}
        </set>
    </update>

    <delete id="deleteEmployee">
        delete
        from employee
        where id = #{id}
    </delete>

    <!--让MyBatis自动将自增的id赋值给传入employee对象的eid属性-->
    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id">
        insert into employee(empName, email, gender)
        values (#{empName}, #{email}, #{gender})
    </insert>


    <!--如果数据库不支持自增，则可以在核心sql语句运行之前执行一条查询最大id的sql语句
    将查到的id赋值给javaBean的那个属性-->
    <insert id="insertEmployee2">
        # before表示在核心sql运行之前
        <selectKey order="BEFORE" resultType="integer" keyProperty="id">
            select max(id)+1 from employee
        </selectKey>
        insert into employee(id, empName, email, gender)
        values (#{id}, #{empName}, #{email}, #{gender})
    </insert>

    <!--OGNL表达式：对象导航图
    Person
        ==lastName
        ==email
        ==address
            ==city
            ==province
            ==street
                ==adminName
                ==info
                ==perCount

    _parameter：代表传入的参数
        1、传入一个参数：_parameter就代表这个参数
        2、传入多个参数：_parameter就代表多个参数集合起来的mao
    _databaseId：代表当前环境
        如果配置了databaseIdProvider，_databasesId就有值

    trim截取字符串
    prefix：为下面的sql整体添加一个前缀
    prefixOverrides：取出整体字符串前面多余的字符
    suffix：为整体添加一个后缀
    suffixOverrides：后面哪个多个可以去掉

    where-->
    <select id="getEmployeesByCondition" resultMap="emp">
        select * from employee
        # where标签可以帮我们去除前面可能多余的and
        <where>
            <if test="id!=null">
                and id>=#{id}
            </if>
            <if test="empName!=null and !empName.equals('')">
                and empName like #{empName}
            </if>
            <if test="email!=null and !email.equals('')">
                and email like #{email}
            </if>
            <if test="gender!=null">
                and gender=#{gender}
            </if>
        </where>
    </select>

    <!--List<Employee> getEmployeesByIdIn(@Param("ids") List<Integer> ids);-->
    <!--foreach
    collection：指定要遍历的集合
    close：以什么结束
    index、item：如果遍历的是一个list，index保存当前索引，item保存当前的元素
                如果遍历的是一个map，index保存当前元素的key，item保存当前元素的value
    open：指定以什么开始
    Seperator：每次遍历元素的分隔符
        -->

    <select id="getEmployeesByIdIn" resultMap="emp">
        select * from employee where id in
        <foreach collection="ids" item="id_item"
                 separator="," open="(" close=")">
            #{id_item}
        </foreach>

    </select>

    <select id="getEmployeesByChoose" resultMap="emp">
        select * from employee
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="empName!=null and !empName.equals('')">
                    empName like #{empName}
                </when>
                <when test="email!=null and !email.equals('')">
                    email like #{email}
                </when>
                <when test="gender!=null">
                    gender=#{gender}
                </when>
                <otherwise>1=1</otherwise>
            </choose>
        </where>
    </select>

</mapper>